from datetime import datetime

import telebot
from telebot import types
from telebot.types import InlineKeyboardButton

from config import SEPARATE_SYMBOL, SECRET_KEY
from nbc import NaiveBayesClassifiers
from process_data import ProcessData

bot = telebot.TeleBot(SECRET_KEY)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """
        –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    :param message:
    """

    ProcessData.create_user_state(message.from_user.id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='sign_up'))
    keyboard.add(InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data='anonymous'))
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n–°–ø–µ—Ä–≤–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è',
                     reply_markup=keyboard)

    ProcessData.set_current_comm(message.from_user.id, 'sign_up')
    ProcessData.set_current_state(message.from_user.id, 1)


@bot.message_handler(commands=['sign_up'])
def send_welcome(message):
    """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    :param message:
    """
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='sign_up'))
    keyboard.add(InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data='anonymous'))
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è',
                     reply_markup=keyboard)

    ProcessData.set_current_comm(message.from_user.id, 'sign_up')
    ProcessData.set_current_state(message.from_user.id, 1)


@bot.callback_query_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'sign_up' and
                                                 ProcessData.get_current_state(message.from_user.id) == 1)
def sign_up(message):
    if message.message:
        if message.data == "sign_up":
            ProcessData.set_current_state(message.from_user.id, 2)
            bot.send_message(message.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç dd/mm/yyyy')
        elif message.data == "anonymous":
            ProcessData.set_current_comm(message.from_user.id, '')
            ProcessData.set_current_state(message.from_user.id, 0)
            bot.send_message(message.message.chat.id, '–û—á–µ–Ω—å –∂–∞–ª–∫–æ, —á—Ç–æ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
            bot.send_message(message.message.chat.id, 'üò≠')
            bot.send_message(message.message.chat.id, '–ù–∞–¥–µ—é—Å—å –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É –ø–æ–∑–¥–Ω–µ–µ')


@bot.message_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'sign_up' and
                                          ProcessData.get_current_state(message.from_user.id) == 2)
def get_date_of_birth(message):
    try:
        date_of_birth = datetime.strptime(message.text, '%d/%m/%Y')
        ProcessData.create_new_user(message.from_user.id, date_of_birth)
        ProcessData.set_current_state(message.from_user.id, 3)
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–∞ –¥–∞—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑")


@bot.message_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'sign_up' and
                                          ProcessData.get_current_state(message.from_user.id) == 3)
def get_city(message):
    city = message.text
    ProcessData.update_city_user(message.from_user.id, city)
    ProcessData.set_current_state(message.from_user.id, 4)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data='male'))
    keyboard.add(InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data='female'))
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'sign_up' and
                                                 ProcessData.get_current_state(message.from_user.id) == 4)
def get_sex(message):
    if message.message:
        if message.data == "male" or message.data == "female":
            sex = message.data
            ProcessData.update_sex_user(message.from_user.id, sex)
            bot.send_message(message.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {}!'.format(message.from_user.first_name))
            ProcessData.set_current_comm(message.from_user.id, '')
            ProcessData.set_current_state(message.from_user.id, 0)


@bot.message_handler(commands=['help'])
def send_help_info(message):
    """
        –í–∫–ª–∞–¥–∫–∞ –ø–æ–º–æ—â–∏
    :param message:
    """
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ')
    bot.send_message(message.chat.id, '/sign_up - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                                      '/symptoms - –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Å–≤–æ–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–º '
                                      '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —á–µ–º –≤—ã –±–æ–ª–µ(–µ—Ç–µ\–ª–∏)\n'
                                      '/update_disease - –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ø—Ä–æ—à–ª—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö\n')


@bot.message_handler(commands=['symptoms'])
def request_symptoms(message):
    """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∞–ª–∏–∑, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤—ã–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    :param message:
    """
    ProcessData.set_current_comm(message.from_user.id, 'symptoms')
    ProcessData.set_current_state(message.from_user.id, 1)
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–∏–º—Ç–æ–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


@bot.message_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'symptoms' and
                                          ProcessData.get_current_state(message.from_user.id) == 1)
def get_symptoms(message):
    ProcessData.set_symptoms(message.from_user.id, ProcessData.get_symptoms(message.from_user.id) + message.text + ', ')
    ProcessData.set_current_state(message.from_user.id, 2)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–Ø –∑–Ω–∞—é —á–µ–º —è –±–æ–ª–µ—é", callback_data='disease'))
    keyboard.add(InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç", callback_data='advice'))
    keyboard.add(InlineKeyboardButton("–Ø —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã", callback_data='symptoms'))
    bot.send_message(message.chat.id, '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –∏–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ —á–µ–º –±–æ–ª–µ–µ—Ç–µ?', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'symptoms' and
                                                 ProcessData.get_current_state(message.from_user.id) == 2)
def get_disease_or_give_advice(message):
    if message.message:
        if message.data == "disease":
            bot.send_message(message.message.chat.id, "–î–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–π –±–æ–ª–µ–∑–Ω–∏")
            ProcessData.set_current_state(message.from_user.id, 3)
        elif message.data == "advice":
            bot.send_message(message.message.chat.id, "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
            predict_disease = NaiveBayesClassifiers().predict(ProcessData.get_clear_symptoms(message.from_user.id))
            ProcessData().put_predict_symptoms_to_db(ProcessData.get_symptoms(message.from_user.id),
                                                     message.from_user.id,
                                                     predict_disease)
            bot.send_message(message.message.chat.id, "–í–∞—à–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ - {}".format(
                predict_disease.capitalize()))
            clear_states(message)
        elif message.data == "symptoms":
            bot.send_message(message.message.chat.id, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–∏–º—Ç–æ–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
            ProcessData.set_current_state(message.from_user.id, 1)


@bot.message_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'symptoms' and
                                          ProcessData.get_current_state(message.from_user.id) == 3)
def get_disease(message):
    ProcessData.set_disease(message.from_user.id, message.text)
    ProcessData().put_symptoms_to_db(ProcessData.get_symptoms(message.from_user.id),
                                     message.from_user.id,
                                     ProcessData.get_disease(message.from_user.id))
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    clear_states(message)


@bot.message_handler(commands=['update_disease'])
def update_disease_get_list_of_symptoms_by_comm(message):
    """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –±–æ–ª–µ–∑–Ω–µ–π
    :param message:
    """
    update_disease_get_list_of_symptoms(message.chat.id, message.from_user.id)


def update_disease_get_list_of_symptoms(chat_id, user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data='update'))
    keyboard.add(InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å", callback_data='assessment'))
    bot.send_message(chat_id, '–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–ª–µ–∑–Ω–∏ –∏–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏?',
                     reply_markup=keyboard)

    ProcessData.set_current_state(user_id, 1)
    ProcessData.set_current_comm(user_id, 'update_or_assessment')


@bot.callback_query_handler(
    func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'update_or_assessment' and
                         ProcessData.get_current_state(message.from_user.id) == 1)
def update_disease_callback_inline(message):
    if message.message:
        if message.data == 'update':
            symptoms_without_disease = ProcessData().get_data_with_predict_disease(message.from_user.id)
            ProcessData.set_amount_of_block(message.from_user.id, len(symptoms_without_disease))
            if ProcessData.get_amount_of_block(message.from_user.id) != 0:
                bot.send_message(message.message.chat.id,
                                 '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–ª–µ–∑–Ω–∏\n'
                                 '–õ–∏–±–æ 0 –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n'
                                 '–í –±–ª–æ–∫–∞—Ö —É–∫–∞–∑–∞–Ω—ã —Å–ø–∏—Å–∫–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ –∏–º –±–æ–ª–µ–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω—ã')
                for count, symptom in enumerate(symptoms_without_disease):
                    ProcessData.set_number_of_row(message.from_user.id,
                                                  ProcessData.get_number_of_row(message.from_user.id) +
                                                  str(symptom[0]) + SEPARATE_SYMBOL)
                    bot.send_message(message.message.chat.id, '‚Ññ{}\n{}\n–ë–æ–ª–µ–∑–Ω—å: {}'.format(
                        count + 1,
                        ', '.join(symptom[1].split(';'))[:-2].capitalize(),
                        symptom[3].capitalize()))

                ProcessData.set_current_state(message.from_user.id, 1)
                ProcessData.set_current_comm(message.from_user.id, 'update_disease')
            elif ProcessData.get_amount_of_block(message.from_user.id) == 0:
                bot.send_message(message.message.chat.id, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
                ProcessData.set_current_state(message.from_user.id, 0)
                ProcessData.set_current_comm(message.from_user.id, '')
        elif message.data == 'assessment':
            symptoms_without_disease = ProcessData().get_data_with_predict_disease(message.from_user.id)
            ProcessData.set_amount_of_block(message.from_user.id, len(symptoms_without_disease))
            if ProcessData.get_amount_of_block(message.from_user.id) != 0:
                bot.send_message(message.message.chat.id,
                                 '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ\n'
                                 '–õ–∏–±–æ 0 –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n'
                                 '–í –±–ª–æ–∫–∞—Ö —É–∫–∞–∑–∞–Ω—ã —Å–ø–∏—Å–∫–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ –∏–º –±–æ–ª–µ–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω—ã')
                for count, symptom in enumerate(symptoms_without_disease):
                    ProcessData.set_number_of_row(message.from_user.id,
                                                  ProcessData.get_number_of_row(message.from_user.id) +
                                                  str(symptom[0]) + SEPARATE_SYMBOL)
                    bot.send_message(message.message.chat.id, '‚Ññ{}\n{}\n–ë–æ–ª–µ–∑–Ω—å: {}'.format(
                        count + 1,
                        ', '.join(symptom[1].split(';'))[:-2].capitalize(),
                        symptom[3].capitalize()))
                ProcessData.set_current_state(message.from_user.id, 1)
                ProcessData.set_current_comm(message.from_user.id, 'assessment')
            elif ProcessData.get_amount_of_block(message.from_user.id) == 0:
                bot.send_message(message.message.chat.id, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏')
                ProcessData.set_current_state(message.from_user.id, 0)
                ProcessData.set_current_comm(message.from_user.id, '')


@bot.message_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'update_disease' and
                                          ProcessData.get_current_state(message.from_user.id) == 1)
def update_disease_get_number(message):
    if message.text.isdigit():
        if int(message.text) != 0:
            ProcessData.set_number_of_block(message.from_user.id, int(message.text))
            if ProcessData.get_number_of_block(message.from_user.id) <= ProcessData.get_amount_of_block(
                    message.from_user.id):
                ProcessData.set_current_state(message.from_user.id, 2)
                bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∏–º —Å–∏–º–ø—Ç–æ–º–∞–º')
            else:
                bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {}'.format(
                    ProcessData.get_amount_of_block(message.from_user.id)))
        else:
            ProcessData.set_number_of_block(message.from_user.id, 0)
            ProcessData.set_current_state(message.from_user.id, 0)
            ProcessData.set_current_comm(message.from_user.id, '')
            ProcessData.set_amount_of_block(message.from_user.id, 0)
            ProcessData.set_number_of_row(message.from_user.id, '')
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')


@bot.message_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'update_disease' and
                                          ProcessData.get_current_state(message.from_user.id) == 2)
def update_disease_get_number(message):
    ProcessData.set_disease(message.from_user.id, message.text)
    ProcessData().update_disease(ProcessData.get_disease(message.from_user.id),
                                 ProcessData.get_number_of_row(message.from_user.id),
                                 ProcessData.get_number_of_block(message.from_user.id))
    ProcessData.set_disease(message.from_user.id, '')
    ProcessData.set_symptoms(message.from_user.id, '')
    ProcessData.set_number_of_block(message.from_user.id, 0)
    ProcessData.set_number_of_row(message.from_user.id, '')
    if ProcessData.get_amount_of_block(message.from_user.id) == 1:
        clear_states(message)
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    elif ProcessData.get_amount_of_block(message.from_user.id) > 1:
        ProcessData.set_current_state(message.from_user.id, 3)
        ProcessData.set_amount_of_block(message.from_user.id, 0)
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(InlineKeyboardButton("–î–∞", callback_data='yes'))
        keyboard.add(InlineKeyboardButton("–ù–µ—Ç", callback_data='no'))
        bot.send_message(message.chat.id, '–í—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–∑–Ω–∏ –ø–æ –¥—Ä—É–≥–∏–º –±–ª–æ–∫–∞–º?',
                         reply_markup=keyboard)


@bot.callback_query_handler(
    func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'update_disease' and
                         ProcessData.get_current_state(message.from_user.id) == 3)
def callback_inline(message):
    if message.message:
        if message.data == "yes":
            ProcessData.set_current_state(message.from_user.id, 0)
            update_disease_get_list_of_symptoms(message.message.chat.id, message.from_user.id)
        elif message.data == "no":
            clear_states(message)
            bot.send_message(message.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')


@bot.message_handler(func=lambda message: ProcessData.get_current_comm(message.from_user.id) == 'assessment' and
                                          ProcessData.get_current_state(message.from_user.id) == 1)
def update_disease_get_number(message):
    """
        –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    :param message:
    """
    if message.text.isdigit():
        if int(message.text) != 0:
            ProcessData.set_number_of_block(message.from_user.id, int(message.text))
            if ProcessData.get_number_of_block(message.from_user.id) <= ProcessData.get_amount_of_block(
                    message.from_user.id):
                ProcessData().update_assessment(
                    ProcessData.get_number_of_block(message.from_user.id),
                    ProcessData.get_number_of_row(message.from_user.id))
                clear_states(message)
                bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
            else:
                bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {}'.format(
                    ProcessData.get_amount_of_block(message.from_user.id)))
        else:
            clear_states(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')


def clear_states(message):
    ProcessData.set_current_state(message.from_user.id, 0)
    ProcessData.set_current_comm(message.from_user.id, '')
    ProcessData.set_symptoms(message.from_user.id, '')
    ProcessData.set_disease(message.from_user.id, '')
    ProcessData.set_number_of_block(message.from_user.id, 0)
    ProcessData.set_number_of_row(message.from_user.id, '')
    ProcessData.set_amount_of_block(message.from_user.id, 0)


bot.infinity_polling()
